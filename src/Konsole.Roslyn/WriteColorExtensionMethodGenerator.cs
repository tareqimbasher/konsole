using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace KonsoleDotNet.SourceGen
{
    [Generator]
    public class WriteColorExtensionMethodGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Code generation goes here
            var sb = new StringBuilder();

            foreach (var color in Enum.GetNames(typeof(ConsoleColor)))
            {
                sb.AppendLine($"public static IKonsole Write{color}(this IKonsole konsole, string text) => konsole.Write(text, ConsoleColor.{color});");
                sb.AppendLine($"public static IKonsole WriteLine{color}(this IKonsole konsole, string text) => konsole.WriteLine(text, ConsoleColor.{color});");
            }
            
            string source = $@"// <auto-generated/>
using System;

namespace KonsoleDotNet
{{
    public static partial class OutputExtensions
    {{
        {sb}
    }}
}}
";
            
            context.AddSource($"OutputExtensions.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            // No initialization required for this one
        }
    }
}